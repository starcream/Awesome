Leetcode 378 Kth Smallest Element in a Sorted Matrix

Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.
Note that it is the kth smallest element in the sorted order, not the kth distinct element.
Example:
matrix = [
   [ 1,  5,  9],
   [10, 11, 13],
   [12, 13, 15]
],
k = 8,
return 13.

我的做法.mergesort。复杂度O(n*2):
class Solution:
    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:
        n = len(matrix)
        if n == 0:
            return 0
        A = matrix[0]

        def Merge(A, B):
            m = len(A)
            i = m-1
            j = n-1
            A += [0 for i in range(0,n)]
            for t in range(m+n-1, 0, -1):
                if i == 0 or (j >= 0 and A[i] < B[j]):
                    A[t] = B[j]
                    j -= 1
                else:
                    A[t] = A[i]
                    i -= 1
        for i in range(1,n):
            Merge(A, matrix[i])
        return A[k-1]


二维二叉搜索。 每次找出比mid小的有多少个数。具体方法还是从左下到右上，每个统计为O(n)
Main loop is binary search of max - min.
Swap from left-bottom to right-top can get count <= mid in O(n) time instead of O(nlogn), total complexity will be O(nlogm) while m = max - min.

public class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int n = matrix.length;
        int lo = matrix[0][0], hi = matrix[n - 1][n - 1];
        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            int count = getLessEqual(matrix, mid);
            if (count < k) lo = mid + 1;
            else hi = mid - 1;
        }
        return lo;
    }
    
    private int getLessEqual(int[][] matrix, int val) {
        int res = 0;
        int n = matrix.length, i = n - 1, j = 0;
        while (i >= 0 && j < n) {
            if (matrix[i][j] > val) i--;
            else {
                res += i + 1;
                j++;
            }
        }
        return res;
    }
}
