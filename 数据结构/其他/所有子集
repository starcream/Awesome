Leetcode 78
Given a set of distinct integers, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: nums = [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

我想到的是一种迭代法。  [1,2,3] 的所有子集是[1,2]的所有子集并上[1,2]的所有子集添上一个3
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        ans = [[]]
        n = len(nums)
        for x in nums:
            t = []
            for p in ans:
                q = p.copy()
                q.append(x)
                t.append(q)
            ans += t 
        return ans
       
 C++版本的代码
Initially, one empty subset [[]]
Adding 1 to []: [[], [1]];
Adding 2 to [] and [1]: [[], [1], [2], [1, 2]];
Adding 3 to [], [1], [2] and [1, 2]: [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]].
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> subs = {{}};    // 学习一下初始化
        for (int num : nums) {   // 学习一下遍历
            int n = subs.size();
            for (int i = 0; i < n; i++) {
                subs.push_back(subs[i]);    // 对之前的子集每个加上当前的num
                subs.back().push_back(num);
            }
        }
        return subs;
    }
}; 

最神奇的方法来啦。因为是所有子集，所有可以先算出集合总数，剩下的就是每个数出现与否

[], [ ], [ ], [    ], [ ], [    ], [    ], [       ]
[], [1], [ ], [1   ], [ ], [1   ], [    ], [1      ]
[], [1], [2], [1, 2], [ ], [1   ], [2   ], [1, 2   ]
[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        int n = nums.size(), p = 1 << n;
        vector<vector<int>> subs(p);
        for (int i = 0; i < p; i++) {
            for (int j = 0; j < n; j++) {
                if ((i >> j) & 1) {
                    subs[i].push_back(nums[j]);
                }
            }
        }
        return subs;
    }
};
