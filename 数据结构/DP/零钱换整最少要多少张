LeetCode 322

You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

Example 1:

Input: coins = [1, 2, 5], amount = 11
Output: 3 
Explanation: 11 = 5 + 5 + 1
Example 2:

Input: coins = [2], amount = 3
Output: -1

我的方法，有点挫。为了记录目标和t需要多少零钱，使用字典而不是数组，节省空间

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        #    Target 20   [8 6 5 2 1]
        coins.sort(reverse=True)
        n = len(coins)
        r = {}
        r[0] = 0
        # t - remain target
        def helper(t):
            if t < 0:  # not okay
                return 1000000
            if t not in r:
                r[t] = 1000000
                for x in coins:
                    r[t] = min(r[t],1+helper(t-x))   # 核心DP
            return r[t]  
        
        helper(amount)
        if r[amount] == 1000000:
            return -1
        return r[amount]
        
        
   我其实是自顶而下。以自底向上的方法。1块钱需要几张，两块钱需要几张......   也是  O(amount * k)，但是不需要递归 
   class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        int Max = amount + 1;
        vector<int> dp(amount + 1, Max);
        dp[0] = 0;
        for (int i = 1; i <= amount; i++) {       
            for (int j = 0; j < coins.size(); j++) {
                if (coins[j] <= i) {
                    dp[i] = min(dp[i], dp[i - coins[j]] + 1);
                }
            }
        }
        return dp[amount] > amount ? -1 : dp[amount];
    }
};
