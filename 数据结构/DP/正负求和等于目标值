Leetcode 494

You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.

Find out how many ways to assign symbols to make sum of integers equal to target S.

Example 1:
Input: nums is [1, 1, 1, 1, 1], S is 3. 
Output: 5
Explanation: 

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

There are 5 ways to assign symbols to make the sum of nums be target 3.
Note:
The length of the given array is positive and will not exceed 20.
The sum of elements in the given array will not exceed 1000.
Your output answer is guaranteed to be fitted in a 32-bit integer


求和问题往往接近于Knapsack问题。就是每个元素的取舍
dp[i][s]  求和为S利用前i个数的路径数。
dp[i][s] = dp[i-1][s-nums[i-1]] + dp[i+1][s+nums[i-1]]
时间复杂度 O(n*S)
基本关系逻辑和暴力法一样，只不过暴力法重复计算，不保存结果。这里DP就是用空间换时间
为了使索引变得可能，对所有的索引加上总和Sum

public int findTargetSumWays(int[] nums, int S) {
      
      int sum = 0;
      for(int n: nums){
        sum += n;
      }
      if (S < -sum || S > sum) { return 0;}
        
      int[][] dp = new int[nums.length + 1][ 2 * sum + 1];
      dp[0][0 + sum] = 1; // 0 + sum means 0, 0 means -sum,  check below graph
      for(int i = 1; i <= nums.length; i++){
        for(int j = 0; j < 2 * sum + 1; j++){
          
          if(j + nums[i - 1] < 2  * sum + 1) dp[i][j] += dp[i - 1][j + nums[i - 1]];
          if(j - nums[i - 1] >= 0) dp[i][j] += dp[i - 1][j - nums[i - 1]];
        }
      }
      return dp[nums.length][sum + S];
    }

另一种方法考虑子集的划分。 Positive vs Negative --> S(p)-S(N) = target --> S(p)*2 = target+S(p)+S(N)= target+SUMOFALL
target和总和必须是偶数，否则可以直接判定不存在解
否则，问题就变成求子集S(p) 使得 S(p) = (target+Sum)>>1;

class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int s) {
        int sum = accumulate(nums.begin(), nums.end(), 0);   // vector 快速求和
        return sum < s || (s + sum) & 1 ? 0 : subsetSum(nums, (s + sum) >> 1);   // 判断是否为偶数，  & 1 == 0 
        // 快速除2  >> 1
    }   

    int subsetSum(vector<int>& nums, int s) {   // 找子集，求和为S
        int dp[s + 1] = { 0 };
        dp[0] = 1;
        for (int n : nums)   // n -- nums[k]
            for (int i = s; i >= n; i--)
                dp[i] += dp[i - n];
        return dp[s];
    }
};
