leetcode 152

Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.

Example 1:

Input: [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
我的方法，维护以i结尾的最大值和最小值
class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        # 以 i 结尾的最大值和最小值？
        
        n = len(nums)
        P = [x for x in nums]  # max >=0
        Q = [x for x in nums]  # min <=0
        
        for i in range(1, n):
            if nums[i] == 0:
                P[i] = 0
                Q[i] = 0
            elif nums[i] > 0:
                if P[i-1] > 0:
                    P[i] = nums[i] * P[i-1]
                if Q[i-1] < 0:
                    Q[i] = nums[i] * Q[i-1]
            else:  # cur < 0
                if P[i-1] > 0:
                    Q[i] = nums[i] * P[i-1]
                if Q[i-1] < 0:  # - * - = + 
                    P[i] = nums[i] * Q[i-1]     
        ans = P[0]
        for x in P:
            if x > ans:
                ans = x
        return ans

之前就在想dp数组可以变成0维。诺，这个解法。尽力保持imax >=0
int maxProduct(int A[], int n) {
    // store the result that is the max we have found so far
    int r = A[0];

    // imax/imin stores the max/min product of
    // subarray that ends with the current number A[i]
    for (int i = 1, imax = r, imin = r; i < n; i++) {
        // multiplied by a negative makes big number smaller, small number bigger
        // so we redefine the extremums by swapping them
        if (A[i] < 0)
            swap(imax, imin);

        // max/min product for the current number is either the current number itself
        // or the max/min by the previous number times the current one
        imax = max(A[i], imax * A[i]);
        imin = min(A[i], imin * A[i]);

        // the newly computed max value is a candidate for our global result
        r = max(r, imax);
    }
    return r;
}
