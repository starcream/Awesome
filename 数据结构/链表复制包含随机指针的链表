Leetcode 138

A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.

Example 1:
Input:
{"$id":"1","next":{"$id":"2","next":null,"random":{"$ref":"2"},"val":2},"random":{"$ref":"2"},"val":1}

Explanation:
Node 1's value is 1, both of its next and random pointer points to Node 2.
Node 2's value is 2, its next pointer points to null and its random pointer points to itself.
 

Note:
You must return the copy of the given head as a reference to the cloned list

这题比较有趣。主要在于随机指针的复制。必须得使深拷贝的新节点和原来的节点找到某种一一映射关系。那么将新节点先插在旧节点后面真是tricky的想法。
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;

    Node() {}

    Node(int _val, Node* _next, Node* _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
class Solution {
public:
    Node* copyRandomList(Node* head) {
        if (head == NULL)
            return NULL;
        Node* r = head;
        Node* tmp;
        // Copy node and insert them after original ones    // original - new - original - new.这时新节点的random指针和next指针都不对
        while(head != NULL){
            Node* cur = new Node();
            cur->val = head->val;
            tmp = head->next;
            head->next = cur;
            cur->next = tmp;
            head = cur->next;
        }
        // Fix the random pointers of the new nodes   // 我的random指针就等于我大哥的random指针的小弟(next)
        head = r;
        Node* cur;
        while(head != NULL){
            cur = head->next;
            if(head->random == NULL)   // 陷阱！！如果大哥的random指针是NULL，那么没有小弟。那么我的random指针也是NULL
                cur->random = NULL;
            else{
                cur->random = head->random->next;
            }
            head = cur->next;
        }
        // return a new list,fix the original list  // 用完大哥的信息，可以独立了。同时保证了原列表不变
        head = r;
        Node* sec = head->next;
        r = sec;
        tmp = NULL;
        // h - s - h - s   -->   h-h-h ; s-s-s
        while(head !=NULL){
            head->next = sec->next;
            head = head->next;
            if(head != NULL){
                sec->next = head->next;
                sec = sec->next;
            }
        }
        
        return r;
    }
};
