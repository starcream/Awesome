Leetcode 208

Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true

注意防止内存泄露

class TrieNode{
    public:
        TrieNode *next[26];
        bool isword;
    
        TrieNode(bool b=false){
            isword = b;
            memset(next, NULL, sizeof(next));   // 分配内存
        }
};


class Trie {
    TrieNode *root;
    TrieNode * cur;
    
public:
    /** Initialize your data structure here. */        
    Trie() {
        root = new TrieNode();
        cur = NULL;
    }
    
    ~Trie(){   
        clear(root);
    }
    
    void clear(TrieNode *root){       //  指针回收
        for(int i = 0; i < 26; i++){
            if(root->next[i] != nullptr){
                clear(root->next[i]);
            }
        }
        delete root;
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        cur = root;
        int i;
        for(i=0;i<word.size()-1;i++){
            if(cur->next[word[i]-'a']  == NULL){
                TrieNode *newNode = new TrieNode();
                cur->next[word[i]-'a'] = newNode;
                cur = newNode;
            }else{
                cur = cur->next[word[i]-'a'];
            }
        }
        if(cur->next[word[i]-'a'] == NULL){
            TrieNode *newNode = new TrieNode(true);
            cur->next[word[i]-'a'] = newNode;
        }else{
            cur->next[word[i]-'a']->isword = true;
        }
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        cur = root;
        for(int i=0;i<word.size();i++){
            if(cur->next[word[i]-'a'] == NULL){
                return false;
            }else{
                cur = cur->next[word[i]-'a'];
            }
        }
        return cur->isword;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        cur = root;
        for(int i=0;i<prefix.size();i++){
            if(cur->next[prefix[i]-'a'] == NULL){
                return false;
            }else{
                cur = cur->next[prefix[i]-'a'];
            }
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */

