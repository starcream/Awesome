Tree
PreOrder -- 先序，先访问根节点
InOrder -- 中序，先左后根节点
PostOrder -- 后序，最后访问根节点

基本方法：递归 / 迭代

Python定义最基本的树：

class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None  
        self.right = None

Typical Tree:
BinaryTree
BinarySearchTree
Trie
N-aryTree

《二叉搜索树问题》
----LC700: Search in a binary tree---- **
class Solution:
    def searchBST(self, root: TreeNode, val: int) -> TreeNode:
        if root == None:
            return None
        
        if root.val < val:
            return self.searchBST(root.right, val)
        elif root.val > val:
            return self.searchBST(root.left, val)
        else:
            return root

----LC98:Validate binary search tree----  ***
Not an easy problem. We need to make sure the whole right tree is larger than root,so we need upper bound and low bound.And need to compare number

Solution1:  Use Inorder Traversal.Left-Root-Right, and a valid BST shall return an ascending array !
And to save space, we dont need to keep whole array, we just need to make sure last_added one is bigger than the previous one.
class Solution:
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        stack, inorder = [], float('-inf')
        
        while stack or root:
            while root:
                stack.append(root)
                root = root.left
            root = stack.pop()
            # If next element in inorder traversal
            # is smaller than the previous one
            # that's not BST.
            if root.val <= inorder:
                return False
            inorder = root.val
            root = root.right

        return True

Solution2:  Define a helper function(root, upper, lower) and go recursive
class Solution:
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        def helper(node, lower = float('-inf'), upper = float('inf')):
            if not node:
                return True
            
            val = node.val
            if val <= lower or val >= upper:
                return False

            if not helper(node.right, val, upper):
                return False
            if not helper(node.left, lower, val):
                return False
            return True

        return helper(root)

----LC938 range SumOfBST (Sum of all nodes whose val are in [L,R]----   *
def rangeSumBST(self, root: TreeNode, L: int, R: int) -> int:
        if not root:
            return 0
        elif root.val < L:
            return self.rangeSumBST(root.right, L, R)
        elif root.val > R:
            return self.rangeSumBST(root.left, L, R)
        return root.val + self.rangeSumBST(root.left, L, R) + self.rangeSumBST(root.right, L, R)

《遍历树和从遍历结果中构建树 》
----LC1008 Construct Binary Search Tree from Preorder Traversal ---- **
因为是BST，又是先序遍历，所有找到比我大的值，则是右子树，之前的为左子树，递归即可
class Solution:
    def bstFromPreorder(self, preorder: List[int]) -> TreeNode:
        n = len(preorder)
        if n == 0:
            return None
        root = TreeNode(preorder[0])
        i = 0
        while i < n and preorder[i] <= preorder[0]:
            i += 1
        if i > 0:
            root.left = self.bstFromPreorder(preorder[1:i])
        if i <= n-1:
            root.right = self.bstFromPreorder(preorder[i:])
        
        return root   

----LC889  Construct Binary Tree from Preorder and Postorder Traversal----  **
没有BST的限制。先序+后序推出树 。 返回的树不唯一。依旧使用递归
class Solution:
    def constructFromPrePost(self, pre: List[int], post: List[int]) -> TreeNode:
        # pre - mid+left+right
        # post - left+right+mid
        root = TreeNode(pre[0])
        if len(pre) == 1:    # no child
            return root
        if pre[1] == post[-2]: # only one child, could be left or right
            root.left = self.constructFromPrePost(pre[1:], post[:-1])
            return root
        else:  # two children
            idx = post.index(pre[1])
            root.left = self.constructFromPrePost(pre[1:idx+2], post[0:idx+1])
            root.right = self.constructFromPrePost(pre[idx+2:], post[idx+1:-1])
            return root

还有O(N)的解法。已知先序和后序，先序的root必然是后序的结尾。使用双指针，依次创建节点，如果节点值和post指针值相同，说明树建完了。
否则，就依次在内部递归建立左子树和右子树
int preIndex = 0, posIndex = 0;
    TreeNode* constructFromPrePost(vector<int>& pre, vector<int>& post) {
        TreeNode* root = new TreeNode(pre[preIndex++]);
        if (root->val != post[posIndex])
            root->left = constructFromPrePost(pre, post);
        if (root->val != post[posIndex])
            root->right = constructFromPrePost(pre, post);
        posIndex++;
        return root;
    }
    
----LC1028. Recover a Tree From Preorder Traversal ---- ** (难）
Input: "1-2--3--4-5--6--7"
Output: [1,2,5,3,4,6,7]   
Input: "1-2--3---4-5--6---7"
Output: [1,2,5,3,null,6,null,4,null,7]
Input: "1-401--349---90--88"
Output: [1,401,null,349,88,90]
  难在----符号（dash）的处理，正则匹配

import re
class Solution(object):
    def recoverFromPreorder(self, S):
        # vals 统计---xx,即所在level和相应的value。并reverse，方便pop
        vals = [(len(s[1]), int(s[2])) for s in re.findall("((-*)(\d+))", S)][::-1]

        def fn(level):
            if not vals or level != vals[-1][0]: return None
            node = TreeNode(vals.pop()[1])
            node.left = fn(level+1)
            node.right = fn(level+1)
            return node
        return fn(0)



《有特殊性质的树》
----

《修改树》
----LC1325 Delete Leaves With a Given Value ----  *
注意是删除具有给定值的叶节点，并且只要过程中出现这样的叶节点，就要删掉，删尽为止
当然还是递归啦
class Solution:
    def removeLeafNodes(self, root: TreeNode, target: int) -> TreeNode:
        
        if root.left:
            root.left = self.removeLeafNodes(root.left, target)
        if root.right:
            root.right = self.removeLeafNodes(root.right, target)
        if root.left == None and root.right == None and root.val == target:
            root = None
        return root

----LC979  Distribute Coins in Binary Tree---- ** 
重新分布每个节点的‘钱’，使得每个节点都只有1块钱，返回需要的最少流通次数（父子节点可以流通，每次流通1块）
重点在于意识到节点的钱为负也是有意义的（债务），依旧递归
class Solution:
    def distributeCoins(self, root: TreeNode) -> int:
        # 我的右子树规模和实际存储，如果存储不足，我要匀给你
        # 如果是左子树存储不足，
        # 存储值为负也是有意义的，总量能够分配就可以
        # 对于一个节点，有以下值
        # 子节点问我借了多少钱，或者子节点给了我多少钱
        # 同样的，我借了父节点多少钱  (return)
        ans = 0
        def visit(root):
            nonlocal ans
            if not root.left and not root.right:
                return root.val - 1
            if root.left:  # transaction between me and my left son
                left = visit(root.left)
                ans += math.fabs(left)
                root.val += left
            if root.right:
                right = visit(root.right)
                ans += math.fabs(right)
                root.val += right
            return root.val - 1
        
        visit(root)
        return int(ans)

----LC814 Binary Tree Pruning ---- **
二叉树节点值为0,1.去掉所有不含1的子树
大繁若简，依旧递归(和LC1325很像）
class Solution:
    def pruneTree(self, root: TreeNode) -> TreeNode:
        if root.left:
            root.left = self.pruneTree(root.left)
        if root.right:
            root.right = self.pruneTree(root.right)
        if not root.left and not root.right and root.val != 1:
            root = None
            return None
        return root

----LC114 Flatten Binary Tree to Linked List---- ***
按照先序遍历的顺序构成链表（可以看成每个节点只有右孩子的树）
可以反向，按照右左root的顺序处理，最后得到链表的头节点
如果先序，则需要保存开始的节点，有些麻烦
public void flatten(TreeNode root) {
    flatten(root,null);
}
private TreeNode flatten(TreeNode root, TreeNode pre) {
    if(root==null) return pre;
    pre=flatten(root.right,pre);    
    pre=flatten(root.left,pre);
    root.right=pre;
    root.left=null;
    pre=root;
    return pre;
}

《字典树》
----LC208 Implement Trie---- ***
Trie(发音同try)  字符串检索  -- 文字自动补全，拼写检查，路由匹配等
C++版本
class TrieNode{
    public:
        TrieNode *next[26];
        bool isword;
    
        TrieNode(bool b=false){
            isword = b;
            memset(next, NULL, sizeof(next));
        }
};


class Trie {
    TrieNode *root;
    TrieNode * cur;
    
public:
    /** Initialize your data structure here. */        
    Trie() {
        root = new TrieNode();
        cur = NULL;
    }
    
    ~Trie(){
        clear(root);
    }
    
    void clear(TrieNode *root){
        for(int i = 0; i < 26; i++){
            if(root->next[i] != nullptr){
                clear(root->next[i]);
            }
        }
        delete root;
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        cur = root;
        int i;
        for(i=0;i<word.size()-1;i++){
            if(cur->next[word[i]-'a']  == NULL){
                TrieNode *newNode = new TrieNode();
                cur->next[word[i]-'a'] = newNode;
                cur = newNode;
            }else{
                cur = cur->next[word[i]-'a'];
            }
        }
        if(cur->next[word[i]-'a'] == NULL){
            TrieNode *newNode = new TrieNode(true);
            cur->next[word[i]-'a'] = newNode;
        }else{
            cur->next[word[i]-'a']->isword = true;
        }
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        cur = root;
        for(int i=0;i<word.size();i++){
            if(cur->next[word[i]-'a'] == NULL){
                return false;
            }else{
                cur = cur->next[word[i]-'a'];
            }
        }
        return cur->isword;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        cur = root;
        for(int i=0;i<prefix.size();i++){
            if(cur->next[prefix[i]-'a'] == NULL){
                return false;
            }else{
                cur = cur->next[prefix[i]-'a'];
            }
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
